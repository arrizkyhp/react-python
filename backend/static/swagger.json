{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Contact API with Authentication, Roles, and Permissions"
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Contact",
      "description": "Operations related to contacts (Authentication Required)"
    },
    {
      "name": "Authentication",
      "description": "User registration, login, logout, and status"
    },
    {
      "name": "User",
      "description": "Operations related to users (Authentication Required)"
    },
    {
      "name": "Role Management",
      "description": "Operations for managing user roles (Admin/Permission Required)"
    },
    {
      "name": "Permission Management",
      "description": "Operations for managing system permissions (Admin/Permission Required)"
    },
    {
      "name": "Category Management",
      "description": "Operations for managing permission categories (Admin/Permission Required)"
    },
    {
      "name": "Audit Logs",
      "description": "System audit trail records (Authentication Required, specific permission required)"
    }
  ],
  "securityDefinitions": {
    "cookieAuth": {
      "type": "apiKey",
      "name": "session",
      "in": "cookie",
      "description": "Session cookie obtained after successful login. Handled automatically by the browser."
    }
  },
  "paths": {
    "/app/contacts": {
      "get": {
        "summary": "Get a list of contacts.",
        "tags": ["Contact"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page.",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts and pagination information.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Contact" }
                },
                "pagination": { "$ref": "#/definitions/Pagination" }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      },
      "post": {
        "summary": "Create a new contact.",
        "tags": ["Contact"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/ContactInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact Created!",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "contact": { "$ref": "#/definitions/Contact" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/contacts/{contact_id}": {
      "patch": {
        "summary": "Update an existing contact.",
        "tags": ["Contact"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the contact to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/ContactUpdateInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Updated.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "contact": { "$ref": "#/definitions/Contact" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      },
      "delete": {
        "summary": "Delete a contact.",
        "tags": ["Contact"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the contact to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Contact deleted!",
            "schema": { "$ref": "#/definitions/SuccessMessage" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      }
    },
    "/app/audit-logs": {
      "get": {
        "summary": "Retrieve a paginated list of system audit logs.",
        "tags": ["Audit Logs"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page.",
            "default": 10
          },
          {
            "name": "entity_type",
            "in": "query",
            "type": "string",
            "description": "Filter by the type of entity involved (e.g., 'Category', 'Permission'). Case-insensitive partial match."
          },
          {
            "name": "entity_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by the specific ID of the entity involved."
          },
          {
            "name": "action_type",
            "in": "query",
            "type": "string",
            "description": "Filter by the type of action performed (e.g., 'CREATE', 'UPDATE', 'DELETE'). Case-insensitive partial match."
          },
          {
            "name": "user_id",
            "in": "query",
            "type": "integer",
            "description": "Filter by the ID of the user who performed the action."
          },
          {
            "name": "from_date",
            "in": "query",
            "type": "string",
            "format": "date",
            "description": "Filter logs from this date (inclusive). Format: YYYY-MM-DD."
          },
          {
            "name": "to_date",
            "in": "query",
            "type": "string",
            "format": "date",
            "description": "Filter logs up to this date (inclusive, end of day). Format: YYYY-MM-DD."
          },
          {
            "name": "search",
            "in": "query",
            "type": "string",
            "description": "General search query across username, description, entity type, and field name (case-insensitive)."
          },
          {
            "name": "sort_by",
            "in": "query",
            "type": "string",
            "enum": ["timestamp", "user", "action", "entity"],
            "description": "Field to sort the audit logs by.",
            "default": "timestamp"
          },
          {
            "name": "sort_order",
            "in": "query",
            "type": "string",
            "enum": ["asc", "desc"],
            "description": "Order of sorting (ascending or descending).",
            "default": "desc"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of audit logs and pagination information.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/AuditLog" }
                },
                "pagination": { "$ref": "#/definitions/Pagination" }
              }
            }
          },
          "400": {
            "description": "Invalid date format provided.",
            "schema": { "$ref": "#/responses/BadRequestError" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user.",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/UserRegistrationInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Log in an existing user.",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/UserLoginInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": {
            "description": "Invalid credentials.",
            "schema": { "$ref": "#/definitions/ErrorMessage" }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log out the current user.",
        "tags": ["Authentication"],
        "security": [{ "cookieAuth": [] }],
        "responses": {
          "200": {
            "description": "Logout successful.",
            "schema": { "$ref": "#/definitions/SuccessMessage" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" }
        }
      }
    },
    "/auth/status": {
      "get": {
        "summary": "Check the current user's login status.",
        "tags": ["Authentication"],
        "security": [{ "cookieAuth": [] }],
        "responses": {
          "200": {
            "description": "User status.",
            "schema": {
              "type": "object",
              "properties": {
                "logged_in": { "type": "boolean" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "401": {
            "description": "User is not logged in (this might not be hit if security middleware redirects first, but good to document)",
            "schema": {
              "type": "object",
              "properties": {
                "logged_in": { "type": "boolean", "example": false }
              }
            }
          }
        }
      }
    },
    "/app/users": {
      "get": {
        "summary": "Get a list of users.",
        "tags": ["User"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination. Ignored if `get_all` is true.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page. Ignored if `get_all` is true.",
            "default": 10
          },
          {
            "name": "get_all",
            "in": "query",
            "type": "boolean",
            "description": "If true, returns all users, ignoring 'page' and 'per_page' parameters. Use with caution for very large datasets.",
            "default": false
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["active", "inactive", "pending", "locked"],
            "description": "Filter users by their status. Applied even if `get_all` is true."
          },
          {
            "name": "username_search",
            "in": "query",
            "type": "string",
            "description": "Search users by partial username match (case-insensitive). Applied even if `get_all` is true."
          },
          {
            "name": "email_search",
            "in": "query",
            "type": "string",
            "description": "Search users by partial email match (case-insensitive). Applied even if `get_all` is true."
          },
          {
            "name": "role_id",
            "in": "query",
            "type": "integer",
            "description": "Filter users who are assigned to a specific role ID. Applied even if `get_all` is true."
          },
          {
            "name": "role_name",
            "in": "query",
            "type": "string",
            "description": "Filter users who are assigned to a role with a specific partial name match (case-insensitive). Applied even if `get_all` is true."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users. If `get_all` is true, pagination metadata might be omitted.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/User" }
                },
                "pagination": {
                  "$ref": "#/definitions/Pagination",
                  "description": "Omitted if `get_all` is true."
                }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      }
    },
    "/app/users/{user_id}": {
      "patch": {
        "summary": "Update an existing user's details and/or roles.",
        "tags": ["User"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the user to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/UserUpdateInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/users/{user_id}/roles": {
      "post": {
        "summary": "Assign a role to a user.",
        "tags": ["User"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the user."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/UserRoleAssignmentInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Role assigned successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/users/{user_id}/roles/{role_id}": {
      "delete": {
        "summary": "Remove a role from a user.",
        "tags": ["User"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the user."
          },
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role to remove."
          }
        ],
        "responses": {
          "200": {
            "description": "Role removed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/User" }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      }
    },
    "/app/roles": {
      "get": {
        "summary": "Get a list of roles.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page.",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "A list of roles and pagination information.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Role" }
                },
                "pagination": { "$ref": "#/definitions/Pagination" }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      },
      "post": {
        "summary": "Create a new role.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/RoleInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Role created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "role": { "$ref": "#/definitions/Role" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/roles/options": {
      "get": {
        "summary": "Get a list of all roles for selection (e.g., multi-select options).",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "responses": {
          "200": {
            "description": "A list of roles with only ID and name, suitable for selection.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "integer", "description": "The role's unique identifier." },
                  "name": { "type": "string", "description": "The role's name." }
                },
                "required": ["id", "name"]
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      }
    },
    "/app/roles/{role_id}": {
      "get": {
        "summary": "Get a single role by ID.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Role details.",
            "schema": { "$ref": "#/definitions/Role" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an existing role.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/RoleUpdateInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Role updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "role": { "$ref": "#/definitions/Role" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      },
      "delete": {
        "summary": "Delete a role.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully.",
            "schema": { "$ref": "#/definitions/SuccessMessage" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/roles/{role_id}/permissions": {
      "post": {
        "summary": "Assign a permission to a role.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/RolePermissionAssignmentInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission assigned successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "role": { "$ref": "#/definitions/Role" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/roles/{role_id}/permissions/{permission_id}": {
      "delete": {
        "summary": "Remove a permission from a role.",
        "tags": ["Role Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the role."
          },
          {
            "name": "permission_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the permission to remove."
          }
        ],
        "responses": {
          "200": {
            "description": "Permission removed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "role": { "$ref": "#/definitions/Role" }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      }
    },
    "/app/permissions": {
      "get": {
        "summary": "Get a list of permissions.",
        "tags": ["Permission Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination. Ignored if `get_all` is true.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page. Ignored if `get_all` is true.",
            "default": 10
          },
          {
            "name": "get_all",
            "in": "query",
            "type": "boolean",
            "description": "If true, returns all permissions, ignoring 'page' and 'per_page' parameters. Use with caution for very large datasets.",
            "default": false
          },
          {
            "name": "include_usage",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes usage statistics (number of roles and affected role names) for each permission.",
            "default": false
          },
          {
            "name": "include_category_details",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes the full category object for each permission.",
            "default": false
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "Filter permissions by their status. Applied even if `get_all` is true."
          },
          {
            "name": "name_search",
            "in": "query",
            "type": "string",
            "description": "Search permissions by partial name match (case-insensitive). Applied even if `get_all` is true."
          },
          {
            "name": "category_id",
            "in": "query",
            "type": "integer",
            "description": "Filter permissions by their category ID. Applied even if `get_all` is true."
          },
          {
            "name": "category_name",
            "in": "query",
            "type": "string",
            "description": "Search permissions by partial category name match (case-insensitive). Applied even if `get_all` is true.",
            "example": "User"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of permissions. If `get_all` is true, pagination metadata might be omitted.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Permission" }
                },
                "pagination": {
                  "$ref": "#/definitions/Pagination",
                  "description": "Omitted if `get_all` is true."
                }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      },
      "post": {
        "summary": "Create a new permission.",
        "tags": ["Permission Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/PermissionInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Permission created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "permission": { "$ref": "#/definitions/Permission" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/permissions/{permission_id}": {
      "get": {
        "summary": "Get a single permission by ID.",
        "tags": ["Permission Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the permission to retrieve."
          },
          {
            "name": "include_usage",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes usage statistics (number of roles and affected role names) for the permission.",
            "default": false
          },
          {
            "name": "include_category_details",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes the full category object for the permission.",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Permission details.",
            "schema": { "$ref": "#/definitions/Permission" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an existing permission.",
        "tags": ["Permission Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the permission to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/PermissionUpdateInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "permission": { "$ref": "#/definitions/Permission" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      },
      "delete": {
        "summary": "Delete a permission.",
        "tags": ["Permission Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the permission to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Permission deleted successfully.",
            "schema": { "$ref": "#/definitions/SuccessMessage" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/categories": {
      "get": {
        "summary": "Get a list of permission categories.",
        "tags": ["Category Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number for pagination. Ignored if `get_all` is true.",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of items per page. Ignored if `get_all` is true.",
            "default": 10
          },
          {
            "name": "get_all",
            "in": "query",
            "type": "boolean",
            "description": "If true, returns all categories, ignoring 'page' and 'per_page' parameters. Use with caution for very large datasets.",
            "default": false
          },
          {
            "name": "include_usage",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes usage statistics (number of associated permissions).",
            "default": false
          },
          {
            "name": "include_affected_permissions",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes a list of affected permissions (ID, name, status). Requires `include_usage=true` to be effective.",
            "default": false
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["active", "inactive"],
            "description": "Filter categories by their status. Applied even if `get_all` is true."
          },
          {
            "name": "name_search",
            "in": "query",
            "type": "string",
            "description": "Search categories by partial name match (case-insensitive). Applied even if `get_all` is true."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories. If `get_all` is true, pagination metadata might be omitted.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Category" }
                },
                "pagination": {
                  "$ref": "#/definitions/Pagination",
                  "description": "Omitted if `get_all` is true."
                }
              }
            }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" }
        }
      },
      "post": {
        "summary": "Create a new permission category.",
        "tags": ["Category Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryInput" }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "category": { "$ref": "#/definitions/Category" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    },
    "/app/categories/{category_id}": {
      "get": {
        "summary": "Get a single permission category by ID.",
        "tags": ["Category Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the category to retrieve."
          },
          {
            "name": "include_usage",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes usage statistics (number of associated permissions).",
            "default": false
          },
          {
            "name": "include_affected_permissions",
            "in": "query",
            "type": "boolean",
            "description": "If true, includes a list of affected permissions (ID, name, status). Requires `include_usage=true` to be effective.",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Category details.",
            "schema": { "$ref": "#/definitions/Category" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an existing permission category.",
        "tags": ["Category Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the category to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryUpdateInput" }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "category": { "$ref": "#/definitions/Category" }
              }
            }
          },
          "400": { "$ref": "#/responses/BadRequestError" },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      },
      "delete": {
        "summary": "Delete a permission category.",
        "tags": ["Category Management"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The ID of the category to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully.",
            "schema": { "$ref": "#/definitions/SuccessMessage" }
          },
          "401": { "$ref": "#/responses/UnauthorizedError" },
          "403": { "$ref": "#/responses/ForbiddenError" },
          "404": { "$ref": "#/responses/NotFoundError" },
          "409": { "$ref": "#/responses/ConflictError" }
        }
      }
    }
  },
  "definitions": {
    "Contact": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string", "format": "email" }
      }
    },
    "ContactInput": {
      "type": "object",
      "required": ["firstName", "lastName", "email"],
      "properties": {
        "firstName": {
          "type": "string",
          "description": "The first name of the contact."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the contact."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address of the contact."
        }
      }
    },
    "ContactUpdateInput": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "The updated first name of the contact."
        },
        "lastName": {
          "type": "string",
          "description": "The updated last name of the contact."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The updated email address of the contact."
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "total_items": { "type": "integer" },
        "total_pages": { "type": "integer" },
        "current_page": { "type": "integer" },
        "per_page": { "type": "integer" },
        "has_next": { "type": "boolean" },
        "has_prev": { "type": "boolean" },
        "next_num": { "type": "integer", "x-nullable": true },
        "prev_num": { "type": "integer", "x-nullable": true }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "username": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "roles": {
          "type": "array",
          "description": "List of roles assigned to the user.",
          "items": { "$ref": "#/definitions/Role" }
        }
      }
    },
    "UserRegistrationInput": {
      "type": "object",
      "required": ["username", "email", "password"],
      "properties": {
        "username": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string", "format": "password" }
      }
    },
    "UserLoginInput": {
      "type": "object",
      "required": ["identifier", "password"],
      "properties": {
        "identifier": { "type": "string", "description": "Username or email" },
        "password": { "type": "string", "format": "password" },
        "remember": { "type": "boolean", "default": false }
      }
    },
    "UserUpdateInput": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The updated username of the user."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The updated email address of the user."
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "The new password for the user."
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "A list of role IDs to assign to the user. This will replace any existing roles. Requires 'user.manage' permission."
        }
      }
    },
    "UserRoleAssignmentInput": {
      "type": "object",
      "required": ["role_id"],
      "properties": {
        "role_id": {
          "type": "integer",
          "description": "The ID of the role to assign to the user."
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "name": { "type": "string" },
        "description": { "type": "string", "x-nullable": true },
        "permissions": {
          "type": "array",
          "description": "List of permissions associated with this role.",
          "items": { "$ref": "#/definitions/Permission" }
        }
      }
    },
    "RoleInput": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the role (e.g., 'Admin', 'Editor')."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the role.",
          "x-nullable": true
        },
        "permission_ids": {
          "type": "array",
          "description": "List of permission IDs to assign to the role upon creation.",
          "items": { "type": "integer" },
          "default": []
        }
      }
    },
    "RoleUpdateInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new unique name of the role."
        },
        "description": {
          "type": "string",
          "description": "An updated description of the role.",
          "x-nullable": true
        },
        "permission_ids": {
          "type": "array",
          "description": "List of permission IDs to set for the role (replaces existing permissions).",
          "items": { "type": "integer" }
        }
      }
    },
    "RolePermissionAssignmentInput": {
      "type": "object",
      "required": ["permission_id"],
      "properties": {
        "permission_id": {
          "type": "integer",
          "description": "The ID of the permission to assign to the role."
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "name": { "type": "string" },
        "description": { "type": "string", "x-nullable": true },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The active status of the category.",
          "default": "active"
        },
        "usage": {
          "type": "integer",
          "description": "The number of permissions associated with this category. Only included if `include_usage=true`."
        },
        "affected_permissions": {
          "type": "array",
          "description": "A list of permissions (ID, name, status) associated with this category. Only included if `include_affected_permissions=true`.",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "name": { "type": "string" },
              "status": { "type": "string" }
            }
          }
        }
      }
    },
    "CategoryInput": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the permission category (e.g., 'User Management')."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the category.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The initial status of the category.",
          "default": "active"
        }
      }
    },
    "CategoryUpdateInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new unique name of the category."
        },
        "description": {
          "type": "string",
          "description": "An updated description of the category.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The updated status of the category."
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "name": { "type": "string" },
        "description": { "type": "string", "x-nullable": true },
        "category_id": {
          "type": "integer",
          "description": "The ID of the category the permission belongs to.",
          "x-nullable": true
        },
        "category": {
          "$ref": "#/definitions/CategoryBasic",
          "description": "The detailed category object for the permission. Only included if `include_category_details=true`.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The active status of the permission.",
          "default": "active"
        },
        "usage": {
          "type": "integer",
          "description": "The number of roles this permission is currently assigned to. Only included if `include_usage=true`."
        },
        "affected_roles": {
          "type": "array",
          "description": "A list of roles (ID and Name) that this permission is assigned to. Only included if `include_usage=true`.",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "name": { "type": "string" }
            }
          }
        }
      }
    },
    "PermissionInput": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the permission (e.g., 'user.create', 'contact.read.all')."
        },
        "description": {
          "type": "string",
          "description": "A brief description of what this permission grants.",
          "x-nullable": true
        },
        "category_id": {
          "type": "integer",
          "description": "The ID of the category the permission belongs to.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The initial status of the permission.",
          "default": "active"
        }
      }
    },
    "PermissionUpdateInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new unique name of the permission."
        },
        "description": {
          "type": "string",
          "description": "An updated description of the permission.",
          "x-nullable": true
        },
        "category_id": {
          "type": "integer",
          "description": "An updated category ID for the permission. Set to `null` to remove category association.",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": ["active", "inactive"],
          "description": "The updated status of the permission."
        }
      }
    },
    "CategoryBasic": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "name": { "type": "string" },
        "description": { "type": "string", "x-nullable": true }
      },
      "description": "Basic details of a category without usage information."
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "message": { "type": "string" }
      }
    },
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "message": { "type": "string" }
      }
    },
    "AuditLog": {
      "type": "object",
      "description": "Represents a single audit log entry detailing an action performed by a user.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier of the audit log entry."
        },
        "user_id": {
          "type": "integer",
          "description": "The ID of the user who performed the action."
        },
        "username": {
          "type": "string",
          "description": "The username of the user who performed the action. (Fetched from User model)."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the action occurred."
        },
        "action_type": {
          "type": "string",
          "description": "The type of action performed (e.g., CREATE, UPDATE, DELETE, LOGIN)."
        },
        "entity_type": {
          "type": "string",
          "description": "The type of entity affected (e.g., 'User', 'Role', 'Permission', 'Contact')."
        },
        "entity_id": {
          "type": "integer",
          "description": "The ID of the entity affected by the action.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "A human-readable description of the action.",
          "x-nullable": true
        },
        "field_name": {
          "type": "string",
          "description": "The specific field name that was changed (for UPDATE actions).",
          "x-nullable": true
        },
        "old_value": {
          "type": "string",
          "description": "The value of the field before the change (for UPDATE actions). This might be JSON stringified for complex types.",
          "x-nullable": true
        },
        "new_value": {
          "type": "string",
          "description": "The value of the field after the change (for UPDATE actions). This might be JSON stringified for complex types.",
          "x-nullable": true
        },
        "ip_address": {
          "type": "string",
          "format": "ipv4",
          "description": "The IP address from which the action originated.",
          "x-nullable": true
        },
        "user_agent": {
          "type": "string",
          "description": "The user agent string of the client that performed the action.",
          "x-nullable": true
        }
      }
    }
  },
  "responses": {
    "UnauthorizedError": {
      "description": "Authentication information is missing or invalid. User is not logged in.",
      "schema": { "$ref": "#/definitions/ErrorMessage" }
    },
    "ForbiddenError": {
      "description": "The user does not have the necessary permissions for a resource.",
      "schema": { "$ref": "#/definitions/ErrorMessage" }
    },
    "NotFoundError": {
      "description": "The requested resource was not found.",
      "schema": { "$ref": "#/definitions/ErrorMessage" }
    },
    "BadRequestError": {
      "description": "Invalid input provided.",
      "schema": { "$ref": "#/definitions/ErrorMessage" }
    },
    "ConflictError": {
      "description": "Resource already exists (e.g., username, email, role name, permission name) or a dependency conflict.",
      "schema": { "$ref": "#/definitions/ErrorMessage" }
    }
  }
}